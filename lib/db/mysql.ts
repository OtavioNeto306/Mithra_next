import mysql from 'mysql2/promise';

// Interface para configura√ß√£o da conex√£o
interface MySQLConfig {
  host: string;
  port: number;
  user: string;
  password: string;
  database: string;
}

// Configura√ß√£o do banco (usar vari√°veis de ambiente em produ√ß√£o)
const config: MySQLConfig = {
  host: process.env.MYSQL_HOST || 'localhost',
  port: parseInt(process.env.MYSQL_PORT || '3306'),
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || '',
  database: process.env.MYSQL_DATABASE || 'database_name'
};

// Pool de conex√µes otimizado para produ√ß√£o
let pool: mysql.Pool | null = null;

function createPool(): mysql.Pool {
  if (!pool) {
    pool = mysql.createPool({
      ...config,
      // üöÄ CONFIGURA√á√ïES OTIMIZADAS PARA PRODU√á√ÉO
      waitForConnections: true,
      connectionLimit: 50,              // ‚úÖ Aumentado de 10 para 50
      queueLimit: 100,                 // ‚úÖ Limitado para evitar memory leak
      acquireTimeout: 60000,           // ‚úÖ 1 minuto timeout para conex√µes
      timeout: 60000,                  // ‚úÖ Query timeout
      reconnect: true,                 // ‚úÖ Auto-reconnect
      idleTimeout: 300000,             // ‚úÖ Fechar conex√µes idle ap√≥s 5min
      
      // Configura√ß√µes adicionais de performance
      supportBigNumbers: true,
      bigNumberStrings: true,
      dateStrings: false,
      multipleStatements: false,
      
      // Configura√ß√µes de SSL e seguran√ßa
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });

    // üìä Event handlers para monitoramento
    pool.on('connection', (connection) => {
      console.log(`‚úÖ Nova conex√£o MySQL estabelecida: ${connection.threadId}`);
    });

    pool.on('error', (err) => {
      console.error('‚ùå Erro no pool MySQL:', err);
      if (err.code === 'PROTOCOL_CONNECTION_LOST') {
        console.log('üîÑ Reconectando ao MySQL...');
      }
    });

    pool.on('acquire', (connection) => {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîó Conex√£o adquirida: ${connection.threadId}`);
      }
    });

    pool.on('release', (connection) => {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîì Conex√£o liberada: ${connection.threadId}`);
      }
    });
  }
  return pool;
}

// Fun√ß√£o para executar queries
export async function executeQuery(sql: string, params: any[] = []): Promise<any[]> {
  try {
    const connection = createPool();
    const [rows] = await connection.execute(sql, params);
    return rows as any[];
  } catch (error) {
    console.error('Erro ao executar query MySQL:', error);
    console.error('SQL:', sql);
    console.error('Params:', params);
    throw new Error(`Erro na query MySQL: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
  }
}

// Fun√ß√£o para executar queries de sele√ß√£o com tratamento de erro mais espec√≠fico
export async function selectQuery(sql: string, params: any[] = []): Promise<any[]> {
  try {
    return await executeQuery(sql, params);
  } catch (error) {
    console.error('Erro em consulta SELECT:', error);
    return [];
  }
}

// Fun√ß√£o para testar conex√£o
export async function testConnection(): Promise<boolean> {
  try {
    const result = await executeQuery('SELECT 1 as test');
    return result.length > 0;
  } catch (error) {
    console.error('Erro ao testar conex√£o MySQL:', error);
    return false;
  }
}

// Fechar pool de conex√µes (√∫til para testes)
export async function closePool(): Promise<void> {
  if (pool) {
    await pool.end();
    pool = null;
  }
} 